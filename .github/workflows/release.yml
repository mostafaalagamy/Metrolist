name: Bump to new version
on:
  push:
    branches:
      - 'main'
    paths:
      - 'app/build.gradle.kts'
  workflow_dispatch:

jobs:
  check-version:
    if: "!contains(github.ref, 'refs/tags')"
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check_version.outputs.version_changed }}
      new_version: ${{ steps.check_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check if version changed
        id: check_version
        run: |
          if [ ! -f app/build.gradle.kts ]; then
            echo "File app/build.gradle.kts does not exist"
            echo "version_changed=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          NEW_VERSION=$(grep -oP 'versionName\s*=\s*"\K[^"]+' app/build.gradle.kts || echo "")
          if [ -z "$NEW_VERSION" ]; then
            echo "Could not find versionName in app/build.gradle.kts"
            echo "version_changed=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          OLD_VERSION=$(git diff HEAD^ HEAD -- app/build.gradle.kts | grep -oP 'versionName\s*=\s*"\K[^"]+' || echo "")

          if [ -z "$OLD_VERSION" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          elif [ "$OLD_VERSION" != "$NEW_VERSION" ]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi
      - name: Debug output
        run: |
          echo "version_changed: ${{ steps.check_version.outputs.version_changed }}"
          echo "new_version: ${{ steps.check_version.outputs.new_version }}"

  build:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        abi: [ 'arm64', 'armeabi', 'x86', 'x86_64', 'universal' ]

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Set Up Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-cleanup: on-success
          
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
 
      - name: Build Release APK
        run: ./gradlew assemble${{ matrix.abi }}Release
        env:
          PULL_REQUEST: 'false'
          GITHUB_EVENT_NAME: ${{ github.event_name }}

      - name: Sign APK
        uses: ilharp/sign-android-release@v1.0.4
        with:
          releaseDir: app/build/outputs/apk/${{ matrix.abi }}/release/
          signingKey: ${{ secrets.KEYSTORE }}
          keyAlias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
          buildToolsVersion: 35.0.0
      
      - name: Move and rename signed APKs
        run: |
          mkdir -p app/build/outputs/apk/${{ matrix.abi }}/release/out
          if [ "${{ matrix.abi }}" = "universal" ]; then
            find app/build/outputs/apk/${{ matrix.abi }}/release/ -name "*-signed.apk" -o -name "*-unsigned-signed.apk" | xargs -I{} mv {} app/build/outputs/apk/${{ matrix.abi }}/release/out/Metrolist.apk
          else
            find app/build/outputs/apk/${{ matrix.abi }}/release/ -name "*-signed.apk" -o -name "*-unsigned-signed.apk" | xargs -I{} mv {} app/build/outputs/apk/${{ matrix.abi }}/release/out/app-${{ matrix.abi }}-release.apk
          fi
  
      - name: Upload Signed APKs
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.abi == 'universal' && 'Metrolist' || format('app-{0}-release', matrix.abi) }}
          path: app/build/outputs/apk/${{ matrix.abi }}/release/out/${{ matrix.abi == 'universal' && 'Metrolist.apk' || format('app-{0}-release.apk', matrix.abi) }}

  create-release:
    needs: [check-version, build]
    if: needs.check-version.outputs.version_changed == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all APKs
        uses: actions/download-artifact@v4
        with:
          path: downloaded_artifacts/
          
      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          UNIVERSAL_APK=$(find downloaded_artifacts/Metrolist -name "*.apk")
          ABI_APKS=$(find downloaded_artifacts -path "*/app-*-release/*.apk")
          
          gh release create "v${{ needs.check-version.outputs.new_version }}" \
            --title "${{ needs.check-version.outputs.new_version }}" \
            --notes "Release of version ${{ needs.check-version.outputs.new_version }}" \
            "$UNIVERSAL_APK" \
            $ABI_APKS
